<?php

  namespace Tests\Feature;

  use Illuminate\Foundation\Testing\RefreshDatabase;
  use Tests\TestCase;
  use App\Models\User;
  use App\Models\Product;
  use App\Models\Cart;
  use App\Models\CartItem;
  use Laravel\Passport\Passport;

  class CartItemControllerTest extends TestCase
  {
    use RefreshDatabase;

    private $fakeUser;

    protected function setUp(): void
    {
      parent::setUp(); // TODO: Change the autogenerated stub
      $this->fakeUser = User::create(['name'     => 'vivian',
                                      'email'    => 'vivian@gmail.com',
                                      'password' => 123456]);
      Passport::actingAs($this->fakeUser);
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testStore()
    {
      $cart = Cart::factory()->create();
      $product = Product::factory()->create();
      $response = $this->call(
        'POST',
        'cart-items',
        ['cart_id' => $cart->id, 'product_id' => $product->id, 'quantity' => 2]
      );
      $response->assertOk();

      $product = Product::factory()->less()->create();
      $response = $this->call(
        'POST',
        'cart-items',
        ['cart_id' => $cart->id, 'product_id' => $product->id, 'quantity' => 10]
      );
      $this->assertEquals($product->title.'數量不足', $response->getContent());

      $response = $this->call(
        'POST',
        'cart-items',
        ['cart_id' => $cart->id, 'product_id' => $product->id, 'quantity' => 999]
      );
      $response->assertStatus(400);
    }

    public function testUpdate()
    {

      $cartItem = CartItem::factory()->create();
      $response = $this->call(
        'PUT',
        'cart-items/'.$cartItem->id,
        ['quantity' => 1]
      );
      $this->assertEquals('true', $response->getContent());

      $cartItem->refresh();
      $this->assertEquals(1, $cartItem->quantity);
    }

    public function testDestroy()
    {
      $cart = Cart::factory()->create([
        'user_id' => $this->fakeUser->id
      ]);
      $product = Product::factory()->make();
      $cartItem = $cart->cartItems()->create(['product_id' => $product->id, 'quantity' => 10]);
      $response = $this->call(
        'DELETE',
        'cart-items/'.$cartItem->id,
        ['quantity' => 1]
      );
      $response->assertOk();

      $cartItem = CartItem::find($cartItem->id);
      $this->assertNull($cartItem);
    }
  }